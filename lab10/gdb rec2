stas@stasPC:~/lab10$ gcc -ggdb rec2.c -o rec2.out
stas@stasPC:~/lab10$ gdb rec2.out
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from rec2.out...done.
(gdb) b main
Breakpoint 1 at 0x400629: file rec2.c, line 11.
(gdb) r
Starting program: /home/stas/lab10/rec2.out 

Breakpoint 1, main () at rec2.c:11
11	int main(){
(gdb) n
13	 scanf("%d",&a);
(gdb) n
6
14	 f=factorial(a);
(gdb) s
factorial (n=6) at rec2.c:5
5	    if (n == 0)
(gdb) s
8	        return factorial(n - 1) * n;
(gdb) s
factorial (n=5) at rec2.c:5
5	    if (n == 0)
(gdb) s
8	        return factorial(n - 1) * n;
(gdb) s
factorial (n=4) at rec2.c:5
5	    if (n == 0)
(gdb) s
8	        return factorial(n - 1) * n;
(gdb) s
factorial (n=3) at rec2.c:5
5	    if (n == 0)
(gdb) s
8	        return factorial(n - 1) * n;
(gdb) s
factorial (n=2) at rec2.c:5
5	    if (n == 0)
(gdb) s
8	        return factorial(n - 1) * n;
(gdb) bt
#0  factorial (n=2) at rec2.c:8
#1  0x000000000040061b in factorial (n=3) at rec2.c:8
#2  0x000000000040061b in factorial (n=4) at rec2.c:8
#3  0x000000000040061b in factorial (n=5) at rec2.c:8
#4  0x000000000040061b in factorial (n=6) at rec2.c:8
#5  0x0000000000400658 in main () at rec2.c:14
(gdb) s
factorial (n=1) at rec2.c:5
5	    if (n == 0)
(gdb) s
8	        return factorial(n - 1) * n;
(gdb) s
factorial (n=0) at rec2.c:5
5	    if (n == 0)
(gdb) s
6	        return 1;
(gdb) s
9	}
(gdb) n
9	}
(gdb) n
9	}
(gdb) n
9	}
(gdb) n
9	}
(gdb) n
9	}
(gdb) n
9	}
(gdb) n
main () at rec2.c:15
15	 printf("%d\n",f);
(gdb) p f
$1 = 720
(gdb) bt
#0  main () at rec2.c:15
(gdb) quit
A debugging session is active.

	Inferior 1 [process 6088] will be killed.

Quit anyway? (y or n) y
stas@stasPC:~/lab10$ 






